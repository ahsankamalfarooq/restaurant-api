let Joi,CustomErorHandler,RefreshToken,User,JwtService,REFRESH_SECRET;_68d‍.x([["default",()=>_68d‍.o]]);_68d‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_68d‍.w("../../services/CustomErrorHandler",[["default",["CustomErorHandler"],function(v){CustomErorHandler=v}]]);_68d‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_68d‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_68d‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);






const refreshController = {
    async refresh(req,res,next) {
        const refreshSchema = Joi.object({refresh_token : Joi.string().required(),})
        
        const {error} = refreshSchema.validate(req.body);

        if(error) {
            return next(error)
        }

        let refreshtoken;

       try{

        //chk token in database
        const refreshtoken = await RefreshToken.findOne({token : req.body.refresh_token})
        if (!refreshtoken) {
            return next(CustomErorHandler.unAuthorized('Invalid Refresh Token'));
        }

        let userId;
        try{

            const {_id} = await JwtService.verify(refreshtoken.token, REFRESH_SECRET);
            userId = _id;

        } catch(err) {
            return next(err)
        }

        const user = await User.findOne({_id : userId});
        if(!user) {
            return next(CustomErorHandler.unAuthorized('User Not Found'));
        }

        //get toekns

        const access_token = JwtService.sign({_id : user._id, role : user.role})
        const refresh_token = JwtService.sign({_id : user._id, role : user.role}, '1y', REFRESH_SECRET)

        await RefreshToken.create({token : refresh_token})
        res.json({access_token,refresh_token})

       } catch (err) {
        return next (new Error('Something Went Wrong' + err.message));
       }


    }
};


_68d‍.d(refreshController);













